---
cloud_private_key_file: "{{ lookup('env','TF_VAR_aws_private_key_path') }}"
general_use_ssh_key: "{{ lookup('env','TF_VAR_general_use_ssh_key') }}"

ANSIBLE_FORCE_COLOR: 'true'

selected_ansible_version: "{{ lookup('env','TF_VAR_selected_ansible_version') }}"

config_override: "{{ lookup('env','config_override') }}"

debug: 0

envtier: "{{ lookup('env','TF_VAR_envtier') }}"

resourcetier: "{{ lookup('env','TF_VAR_resourcetier') }}"

show: "{{ lookup('env','TF_VAR_SHOW') }}"
seq: "{{ lookup('env','TF_VAR_SEQ') }}"
shot: "{{ lookup('env','TF_VAR_SHOT') }}"

bridgenic: "{{ lookup('env','TF_VAR_bridgenic') }}"

terraform_version: "{{ lookup('env','TF_VAR_terraform_version') }}"
inventory: "{{ lookup('env','TF_VAR_inventory') }}"

firehawk_path: "{{ lookup('env','TF_VAR_firehawk_path') }}"
secrets_path: "{{ lookup('env','TF_VAR_secrets_path') }}"

# domains
public_domain: "{{ lookup('env','TF_VAR_public_domain') }}"

bucket_extension: "{{ lookup('env','TF_VAR_bucket_extension') }}"
fsx_bucket_prefix: "{{ lookup('env','TF_VAR_fsx_bucket_prefix') }}"
fsx_storage_capacity: "{{ lookup('env','TF_VAR_fsx_storage_capacity') }}"

installers_bucket: "software.{{ lookup('env','TF_VAR_bucket_extension_prod') }}" # The installers s3 bucket is always used to store installation files to avoid multiple downloads/uploads from 3rd parties
repositories_bucket: "repositories.{{ lookup('env','TF_VAR_bucket_extension') }}"
production_bucket: "prod.{{ lookup('env','TF_VAR_bucket_extension') }}"

private_subnet1: "{{ lookup('env', 'TF_VAR_private_subnet1') }}"
private_subnet1_dev: "{{ lookup('env', 'TF_VAR_private_subnet1_dev') }}"
private_subnet1_prod: "{{ lookup('env', 'TF_VAR_private_subnet1_prod') }}"

private_subnet2: "{{ lookup('env', 'TF_VAR_private_subnet2') }}"
private_subnet2_dev: "{{ lookup('env', 'TF_VAR_private_subnet2_dev') }}"
private_subnet2_prod: "{{ lookup('env', 'TF_VAR_private_subnet2_prod') }}"

public_subnet1: "{{ lookup('env', 'TF_VAR_public_subnet1') }}"
public_subnet1_dev: "{{ lookup('env', 'TF_VAR_public_subnet1_dev') }}"
public_subnet1_prod: "{{ lookup('env', 'TF_VAR_public_subnet1_prod') }}"

public_subnet2: "{{ lookup('env', 'TF_VAR_public_subnet2') }}"
public_subnet2_dev: "{{ lookup('env', 'TF_VAR_public_subnet2_dev') }}"
public_subnet2_prod: "{{ lookup('env', 'TF_VAR_public_subnet2_prod') }}"

### NAS volume mounts ###

softnas_mount_source: "/{{ envtier }}pool0/{{ envtier }}volume0"
# "-m" will force a pool to import, which is usefull if drives used for a write log are missing.
zpool_import_flags: "-m"

softnas_volatile: "{{ lookup('env', 'TF_VAR_softnas_volatile') }}"

#production mount path for all locations
prod_mount_path: "/prod"

#the ip of your onsite storage to be mounted
localnas1_private_ip: "{{ lookup('env','TF_VAR_localnas1_private_ip') }}"
#the mount path of your onsite storage eg "/prod"
prod_path_generic: "{{ lookup('env','TF_VAR_prod_path_generic') }}"
prod_path_remote: "{{ lookup('env','TF_VAR_prod_path_remote') }}"

#the absolute path to access the onsite nas mount by location eg "/mycity_prod"
localnas1_volume_name: "{{ lookup('env', 'TF_VAR_localnas1_volume_name') }}"
localnas1_path_abs: "{{ lookup('env', 'TF_VAR_localnas1_path_abs') }}"
localnas1_export_path: "{{ lookup('env', 'TF_VAR_localnas1_export_path') }}"
#the absolute path to access the cloud nfs mount by location eg "/prod_sydney_aws"
prod_path_abs_cloud: "{{ lookup('env', 'TF_VAR_prod_path_abs_cloud') }}"

#the path to the firehawk houdinitools repository eg "/prod/assets/openfirehawk-houdini-tools"
firehawk_houdini_tools: "{{ lookup('env', 'TF_VAR_firehawk_houdini_tools') }}"

softnas1_private_ip1: "{{ lookup('env', 'TF_VAR_softnas1_private_ip1') }}"

# deadline_version: "{{ lookup('env', 'TF_VAR_deadline_version') }}"

# deadline_certificates_location: "/opt/Thinkbox/certs"
# deadline_client_certificate: "Deadline10Client.pfx"
# deadline_proxy_certificate: "{{ resourcetier }}Deadline10RemoteClient.pfx"
# deadline_proxy_certificate_password: "{{ lookup('env','TF_VAR_deadline_proxy_certificate_password') }}"

# deadline_proxy_root_dir: "{{ lookup('env','TF_VAR_deadline_proxy_root_dir') }}"

# # deadline_linux_installers_tar: "/deployuser/downloads/Deadline-{{ deadline_version }}-linux-installers.tar"
# deadline_prefix: "/opt/Thinkbox/Deadline10"

# deadline_linux_no_extension: "{{ deadline_linux_installers_tar | splitext | first }}"
# deadline_linux_basename: "{{ deadline_linux_no_extension.split('/')[-1] }}"
# deadline_linux_filename: "{{ deadline_linux_installers_tar.split('/')[-1] }}"

### Vault Variables ###

# db_pass: "{{ lookup('env','TF_VAR_db_pass') }}"

vpn_cidr: "{{ lookup('env','TF_VAR_vpn_cidr') }}"
vpn_cidr_dev: "{{ lookup('env','TF_VAR_vpn_cidr_prod') }}"
vpn_cidr_prod: "{{ lookup('env','TF_VAR_vpn_cidr_prod') }}"
onsite_private_subnet_cidr: "{{ lookup('env','TF_VAR_onsite_private_subnet_cidr') }}"
ssh_config_remote_subnet: "{{ lookup('env','TF_VAR_ssh_config_remote_subnet') }}"


vpn_nic: eth1

syscontrol_gid: "{{ lookup('env', 'TF_VAR_syscontrol_gid') }}"
deployuser_uid: "{{ lookup('env', 'TF_VAR_deployuser_uid') }}"

openvpn_user: openvpnas
openvpn_user_pw: "{{ lookup('env','TF_VAR_openvpn_user_pw') }}"

softnas_ssh_user: "{{ lookup('env','TF_VAR_softnas_ssh_user') }}"
user_softnas_pw: "{{ lookup('env','TF_VAR_user_softnas_pw') }}"

user_deadlineuser_name: "{{ lookup('env','TF_VAR_user_deadlineuser_name') }}"
user_deadlineuser_pw: "{{ lookup('env','TF_VAR_user_deadlineuser_pw') }}"

onsite_workstation_private_ssh_key: "{{ lookup('env','TF_VAR_onsite_workstation_private_ssh_key') }}"

user_inituser_name: "{{ lookup('env', 'TF_VAR_user_inituser_name') }}"
user_inituser_pw: "{{ lookup('env', 'TF_VAR_user_inituser_pw') }}"
user_deployuser_pw: "{{ lookup('env','TF_VAR_user_deployuser_pw') }}"

workstation_address: "{{ lookup('env', 'TF_VAR_workstation_address') }}"

# openfirehawkserver: "{{ lookup('env','TF_VAR_openfirehawkserver') }}"
# openfirehawkserver_dev: "{{ lookup('env','TF_VAR_openfirehawkserver_dev') }}"
# openfirehawkserver_prod: "{{ lookup('env','TF_VAR_openfirehawkserver_prod') }}"
# openfirehawkserver_name: "{{ lookup('env', 'TF_VAR_openfirehawkserver') }}"

gateway_hostname: "{{ lookup('env', 'TF_VAR_gateway_hostname') }}"
control_hostname: "{{ lookup('env', 'TF_VAR_control_hostname') }}"

usage_based_url: "{{ lookup('env', 'TF_VAR_usage_based_url') }}"
usage_based_activation_code: "{{ lookup('env', 'TF_VAR_usage_based_activation_code') }}"

houdini_license_server_address: "{{ lookup('env','TF_VAR_houdini_license_server_address') }}"

# The maximum number of instances to launch in a spot fleet for houdini engine
max_spot_capacity_engine: 7
max_spot_capacity_mantra: 61

firehawk_sync_source: "{{ lookup('env','TF_VAR_firehawk_sync_source') }}"
firehawk_sync_target: "{{ lookup('env','TF_VAR_firehawk_sync_target') }}"

# keybase user id or path to pgp public key on disk
pgp_public_key: "{{ lookup('env','TF_VAR_pgp_public_key') }}"

keybase_secret: "{{ lookup('env','TF_VAR_keybase_secret') }}"
pgp_email: "{{ lookup('env','TF_VAR_pgp_email') }}"
pgp_secret: "{{ lookup('env','TF_VAR_pgp_secret') }}"

aws_region: "{{ lookup('env','TF_VAR_aws_region') }}"
AWS_REGION: "{{ lookup('env','TF_VAR_aws_region') }}"

AWS_ACCESS_KEY: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"

AWS_SECRET_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"

storage_user_access_key_id: "{{ lookup('env','storage_user_access_key_id') }}"
storage_user_secret: "{{ lookup('env','storage_user_secret') }}"

aws_key_name: "{{ lookup('env','TF_VAR_aws_key_name') }}"
aws_private_key_path: "{{ lookup('env','TF_VAR_aws_private_key_path') }}"

time_zone_info_dict_linux: {
Australia_Sydney: "/usr/share/zoneinfo/Australia/Sydney"
}

time_zone_info_path_linux: "{{ time_zone_info_dict_linux['Australia_Sydney'] }}"

### SECRETS AND PEM KEYS

repo_dir: "{{ playbook_dir.split('/')[0:-1]|join('/') }}"

vault_key_name_general: "{{ lookup('env','TF_VAR_vault_key_name_general') }}"
vault_key_path: "{{ repo_dir }}/../secrets/keys/{{ vault_key_name_general }}"

key_folder: "{{ repo_dir }}/../secrets/keys/"

key_path: "{{ repo_dir }}/../secrets/keys/{{ aws_key_name }}.pem"
secret_path: "{{ repo_dir }}/../secrets/secrets-general"
secrets_archive: "{{ repo_dir }}/../secrets/{{ envtier }}"