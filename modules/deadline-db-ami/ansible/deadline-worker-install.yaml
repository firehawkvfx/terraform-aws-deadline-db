# To configure ssh for a local workstation, read https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/

# then run these two commmands.  for some reason ping is required first or hang on gathering facts occurs.
# ansible-playbook -i "$TF_VAR_inventory" ansible/deadline-worker-install.yaml

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    ansible_become_pass: "{{ user_deadlineuser_pw }}"
    ansible_password: "{{ user_deadlineuser_pw }}"
    variable_connect_as_user: deployuser
    variable_user: deadlineuser

  tasks:
  - name: "establish connect test & existance of user path {{ variable_connect_as_user }}"
    stat:
      path: "/home/{{ variable_connect_as_user }}"
    register: result

  - name: "establish connect test & existance of user path {{ variable_user }}"
    stat:
      path: "/home/{{ variable_user }}"
    register: result

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default('deadlineuser') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  vars:
    variable_connect_as_user: deadlineuser
    variable_user: deadlineuser
    pcoip: False
    ansible_become_pass: "{{ user_deadlineuser_pw }}"

  roles:
    - role: firehawkvfx.core.pip

  post_tasks:
  - name: create Thinkbox dir
    file: 
      path: /opt/Thinkbox/
      state: directory
      mode: u=rwX,g=rX,o-rwx
      owner: "{{ variable_user }}"
      group: syscontrol
    become: true

  - name: create Thinkbox cert dir
    file: 
      path: /opt/Thinkbox/certs
      state: directory
      mode: u=rwX,g=rX,o-rwx
      owner: "{{ variable_user }}"
      group: syscontrol
    become: true

  - name: Create submission scripts dir if it doesn't exist on remote
    file: 
      path: /opt/Thinkbox/DeadlineRepository10/submission
      state: directory
      mode: u=rX,g=rX,o-rwx
      owner: "{{ variable_user }}"
      group: syscontrol
      recurse: yes
    become: true

- hosts: firehawkgateway
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  tasks:
  - name: ensure local submission scripts dir permissions are readable on the ansible control
    file:
      path: /opt/Thinkbox/DeadlineRepository10/submission
      state: directory
      mode: u=rX,g=rX,o=r
      owner: "{{ variable_user }}"
      group: syscontrol
      recurse: yes
    become: true

  - name: check permissions
    shell: |
      ls -ltriah "{{ deadline_certificates_location }}"
    become: true
    register: check_permisions

  - name: show permissions
    debug:
      var: check_permisions.stdout

  - name: set deadline remote client certificate permissions locally - deadline-worker-install.yaml
    file: 
      path: "{{ deadline_certificates_location }}/{{ deadline_proxy_certificate }}"
      mode: u=rw,g=r,o=r
      owner: "{{ variable_user }}"
      group: syscontrol
    become: true

- hosts: firehawkgateway
  remote_user: deployuser
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true

  tasks:
  - name: Fetch deadline remote client certificate and store on ansible_control
    fetch: 
      src: "{{ deadline_certificates_location }}/{{ deadline_proxy_certificate }}"
      dest: "/secrets/keys/"
      mode: '0600'
      owner: "{{ variable_user }}"
      group: syscontrol
      flat: true
    become: true
    # delegate_to: firehawkgateway

- hosts: "{{ variable_host | default('workstation1') }}"
  remote_user: "{{ variable_connect_as_user | default('deployuser') }}"
  gather_facts: "{{ variable_gather_facts | default('false') }}"
  become: true
  
  tasks:
# these packages are required to pass an encrypted string via commandline into a user pass and are suited to centos.
  - name: install expect
    package:
      name: expect
      state: present
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - name: restart sshd.service
    service: 
      name: sshd
      state: restarted

  - name: Copy deadline remote client certificate
    copy: 
      src: "/secrets/keys/{{ deadline_proxy_certificate }}"
      dest: "/opt/Thinkbox/certs/"
      mode: '0600'
      owner: "{{ variable_user }}"
      group: syscontrol
    become: true
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - name: create download dir
    file:
      path: "/home/{{ variable_user }}/Downloads"
      state: directory
      owner: "{{ variable_user }}"
      group: "{{ variable_user }}"
      mode: '0755'
    become: true

  - name: create deadline installer dir
    file:
      path: "/home/{{ variable_user }}/Downloads/{{ deadline_linux_basename }}"
      state: directory
      owner: "{{ variable_user }}"
      group: "{{ variable_user }}"
      mode: '0755'
    become: true
    become_user: "{{ variable_user }}"

  - name: get the username
    command: whoami
    become: false
    register: whoami
  - set_fact:
      remote_user: "{{ whoami.stdout }}"
  - debug: var=remote_user

  - name: "s3-sync get {{ deadline_linux_filename }} from {{ installers_bucket }}"
    import_role:
      name: firehawkvfx.core.s3_sync
    vars:
      mode: "pull"
      bucket: "{{ installers_bucket }}"
      basedir: "/home/{{ variable_user }}/Downloads"
      filename: "{{ deadline_linux_filename }}"
      sync_user: "{{ variable_user }}" # due to a limitaiton the var provided must not be the same

  # - name: S3 GET deadline
  #   aws_s3:
  #     bucket: "{{ installers_bucket }}"
  #     object: "{{ deadline_linux_filename }}"
  #     dest: "/home/{{ variable_user }}/Downloads/{{ deadline_linux_filename }}"
  #     mode: get
  #     region: "{{ aws_region }}"
  #   tags:
  #   - cloud-install
  #   - onsite-install



  - name: Extract
    unarchive:
      src: "/home/{{ variable_user }}/Downloads/{{ deadline_linux_filename }}"
      dest: "/home/{{ variable_user }}/Downloads/{{ deadline_linux_basename }}"
      owner: "{{ variable_user }}"
      mode: u+x
      remote_src: true
    become: true

  - name: "Ansible find files in subdirectory downloads"
    find:
      paths: "/home/{{ variable_user }}/Downloads/{{ deadline_linux_basename }}"
      patterns: "*DeadlineClient-{{ deadline_version }}-linux-x64-installer.run"
    register: files_matched
    become: true

  - debug:
      msg: "installer path: {{ files_matched.files[0].path }}"

  - name: set execute permissions on installer
    file:
      path: "{{ files_matched.files[0].path }}"
      mode: '0700'
      owner: "{{ variable_user }}"
      group: syscontrol
    become: true

  - name: deadline dependencies
    package:
      name:
      - redhat-lsb
      - samba-client
      - samba-common
      - cifs-utils
      - nfs-utils
      - tree
      - bzip2
      - nmap
      state: present
    vars:
      ansible_python_interpreter: "{{ package_python_interpreter }}"

  - stat:
      path: /var/lib/Thinkbox/Deadline10/deadline.ini
    register: deadline_ini_file

  - name: get date
    shell: |
      date +"%Y%m%d_%H%M%S"
    register: current_date

  - set_fact:
      backup_dest: "/var/lib/Thinkbox/Deadline10/deadline.bak_{{ current_date.stdout }}"
    when: deadline_ini_file.stat.exists

  - debug:
      msg: "will backup file to {{ backup_dest }}"
    when: deadline_ini_file.stat.exists

  - name: move old config to backup.  this prevents old conf settings staying around.
    command: "mv /var/lib/Thinkbox/Deadline10/deadline.ini {{ backup_dest }}"
    when: deadline_ini_file.stat.exists

  - name: install deadline client
    shell: |
      cd /home/{{ variable_user }}/Downloads/
      # set -x
      {{ files_matched.files[0].path }} --mode unattended --debuglevel 2 --prefix {{ deadline_prefix }} --connectiontype Remote --noguimode true --licensemode UsageBased --launcherdaemon true --slavestartup 1 --daemonuser {{ variable_user }} --enabletls true --tlsport 4433 --httpport 8080 --proxyrootdir {{ deadline_proxy_root_dir }} --proxycertificate {{ deadline_certificates_location }}/{{ deadline_proxy_certificate }} --proxycertificatepassword avaultpassword
    register: deadline_client_install_output_shell
    become: true

  - name: check deadline client install output
    debug:
      msg: "{{ deadline_client_install_output_shell.stdout }}"

  - name: check /var/lib/Thinkbox/Deadline10/deadline.ini
    command: cat /var/lib/Thinkbox/Deadline10/deadline.ini 
    register: deadline_config

  - debug: msg="{{ deadline_config.stdout }}"

  - debug: msg="{{ deadline_config.stderr }}"

  - name: Add alias for deadlinemonitor
    lineinfile:
      state: present
      path: "/home/{{ variable_user }}/.bashrc"
      line: "alias deadlinemonitor='cwd=\"$(pwd)\" && cd /opt/Thinkbox/Deadline10/bin && ./deadlinemonitor'"
      backup: true
      owner: "{{ variable_user }}"
      regexp: ".*alias deadlinemonitor=.*"
    become: true

# multislave functionality
  - copy:
      src: /deployuser/scripts/deadline-multi-slave.sh
      dest: /usr/bin/deadline-multi-slave.sh
      owner: "{{ variable_user }}"
      group: syscontrol
      mode: u=rx,g=rx,o-rwx
    become: true
    tags:
    - multi-slave

# wrapper for multislave script to run as service
  - copy:
      src: /deployuser/scripts/multislaveservice.sh
      dest: /usr/bin/multislaveservice.sh
      owner: root
      group: root
      mode: u=rx,g=rx,o=rx
    become: true
    tags:
    - multi-slave

# service wraper for multislave
  - copy:
      src: /deployuser/scripts/multislaveservice.service
      dest: /etc/systemd/system/multislaveservice.service
      owner: root
      group: root
      mode: '0644'
    become: true
    tags:
    - multi-slave
    
  - name: Start service multislaveservice, if not started
    service:
      name: multislaveservice
      state: started
      daemon_reload: true
      enabled: true
    become: true
    tags:
    - multi-slave

  - debug:
      msg: "to disable multilsave service for deadline use 'systemctl disable multislaveservice.service'"
    tags:
    - multi-slave

  - name: allow permission for deadline to shutdown the machine.
    lineinfile:
      state: present
      path: /etc/sudoers
      line: "{{ variable_user }} ALL=(ALL) NOPASSWD: /sbin/poweroff, /sbin/reboot, /sbin/shutdown"
      insertafter: '^.*localhost=/sbin/shutdown.*$'
    become: true